/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Immutable.Ts.Model
{
    /// <summary>
    ///     OrderProtocolData
    /// </summary>
    [DataContract(Name = "Order_protocolData")]
    public class OrderProtocolData
    {
        /// <summary>
        ///     Defines OrderType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTypeEnum
        {
            /// <summary>
            ///     Enum FULLRESTRICTED for value: FULL_RESTRICTED
            /// </summary>
            [EnumMember(Value = "FULL_RESTRICTED")]
            FULLRESTRICTED,

            /// <summary>
            ///     Enum PARTIALRESTRICTED for value: PARTIAL_RESTRICTED
            /// </summary>
            [EnumMember(Value = "PARTIAL_RESTRICTED")]
            PARTIALRESTRICTED
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderProtocolData" /> class.
        /// </summary>
        /// <param name="counter">counter.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="seaportAddress">seaportAddress.</param>
        /// <param name="seaportVersion">seaportVersion.</param>
        /// <param name="zoneAddress">zoneAddress.</param>
        public OrderProtocolData(string counter = default, OrderTypeEnum? orderType = default,
            string seaportAddress = default, string seaportVersion = default, string zoneAddress = default)
        {
            Counter = counter;
            OrderType = orderType;
            SeaportAddress = seaportAddress;
            SeaportVersion = seaportVersion;
            ZoneAddress = zoneAddress;
        }


        /// <summary>
        ///     Gets or Sets OrderType
        /// </summary>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public OrderTypeEnum? OrderType { get; set; }

        /// <summary>
        ///     Gets or Sets Counter
        /// </summary>
        [DataMember(Name = "counter", EmitDefaultValue = false)]
        public string Counter { get; set; }

        /// <summary>
        ///     Gets or Sets SeaportAddress
        /// </summary>
        [DataMember(Name = "seaportAddress", EmitDefaultValue = false)]
        public string SeaportAddress { get; set; }

        /// <summary>
        ///     Gets or Sets SeaportVersion
        /// </summary>
        [DataMember(Name = "seaportVersion", EmitDefaultValue = false)]
        public string SeaportVersion { get; set; }

        /// <summary>
        ///     Gets or Sets ZoneAddress
        /// </summary>
        [DataMember(Name = "zoneAddress", EmitDefaultValue = false)]
        public string ZoneAddress { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderProtocolData {\n");
            sb.Append("  Counter: ").Append(Counter).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  SeaportAddress: ").Append(SeaportAddress).Append("\n");
            sb.Append("  SeaportVersion: ").Append(SeaportVersion).Append("\n");
            sb.Append("  ZoneAddress: ").Append(ZoneAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}