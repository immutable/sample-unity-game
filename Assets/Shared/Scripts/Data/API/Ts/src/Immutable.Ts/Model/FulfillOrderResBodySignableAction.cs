/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Ts.Client.OpenAPIDateConverter;

namespace Immutable.Ts.Model
{
    /// <summary>
    /// FulfillOrderResBodySignableAction
    /// </summary>
    [DataContract(Name = "fulfillOrderResBodySignableAction")]
    public partial class FulfillOrderResBodySignableAction
    {

        /// <summary>
        /// Gets or Sets Purpose
        /// </summary>
        [DataMember(Name = "purpose", EmitDefaultValue = false)]
        public FulfillOrderResBodySignablePurpose? Purpose { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SIGNABLE for value: SIGNABLE
            /// </summary>
            [EnumMember(Value = "SIGNABLE")]
            SIGNABLE = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillOrderResBodySignableAction" /> class.
        /// </summary>
        /// <param name="message">message.</param>
        /// <param name="purpose">purpose.</param>
        /// <param name="type">type.</param>
        public FulfillOrderResBodySignableAction(FulfillOrderResBodySignableActionMessage message = default(FulfillOrderResBodySignableActionMessage), FulfillOrderResBodySignablePurpose? purpose = default(FulfillOrderResBodySignablePurpose?), TypeEnum? type = default(TypeEnum?))
        {
            this.Message = message;
            this.Purpose = purpose;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public FulfillOrderResBodySignableActionMessage Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillOrderResBodySignableAction {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
