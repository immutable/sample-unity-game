/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Ts.Client.OpenAPIDateConverter;

namespace Immutable.Ts.Model
{
    /// <summary>
    /// CreateListingResBodyOrderStatusAnyOf4
    /// </summary>
    [DataContract(Name = "createListingResBodyOrderStatus_anyOf_4")]
    public partial class CreateListingResBodyOrderStatusAnyOf4
    {
        /// <summary>
        /// The order status that indicates an order cannot be fulfilled.
        /// </summary>
        /// <value>The order status that indicates an order cannot be fulfilled.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 1
        }


        /// <summary>
        /// The order status that indicates an order cannot be fulfilled.
        /// </summary>
        /// <value>The order status that indicates an order cannot be fulfilled.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public NameEnum? Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateListingResBodyOrderStatusAnyOf4" /> class.
        /// </summary>
        /// <param name="name">The order status that indicates an order cannot be fulfilled..</param>
        /// <param name="sufficientApprovals">Whether the order offerer has sufficient approvals.</param>
        /// <param name="sufficientBalances">Whether the order offerer still has sufficient balance to complete the order.</param>
        public CreateListingResBodyOrderStatusAnyOf4(NameEnum? name = default(NameEnum?), bool sufficientApprovals = default(bool), bool sufficientBalances = default(bool))
        {
            this.Name = name;
            this.SufficientApprovals = sufficientApprovals;
            this.SufficientBalances = sufficientBalances;
        }

        /// <summary>
        /// Whether the order offerer has sufficient approvals
        /// </summary>
        /// <value>Whether the order offerer has sufficient approvals</value>
        [DataMember(Name = "sufficient_approvals", EmitDefaultValue = true)]
        public bool SufficientApprovals { get; set; }

        /// <summary>
        /// Whether the order offerer still has sufficient balance to complete the order
        /// </summary>
        /// <value>Whether the order offerer still has sufficient balance to complete the order</value>
        [DataMember(Name = "sufficient_balances", EmitDefaultValue = true)]
        public bool SufficientBalances { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateListingResBodyOrderStatusAnyOf4 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SufficientApprovals: ").Append(SufficientApprovals).Append("\n");
            sb.Append("  SufficientBalances: ").Append(SufficientBalances).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
