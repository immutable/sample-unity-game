/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Ts.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Immutable.Ts.Model
{
    /// <summary>
    /// V1TsSdkV1OrderbookPrepareListingPostRequestSell
    /// </summary>
    [JsonConverter(typeof(V1TsSdkV1OrderbookPrepareListingPostRequestSellJsonConverter))]
    [DataContract(Name = "_v1_ts_sdk_v1_orderbook_prepareListing_post_request_sell")]
    public partial class V1TsSdkV1OrderbookPrepareListingPostRequestSell : AbstractOpenAPISchema
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1TsSdkV1OrderbookPrepareListingPostRequestSell" /> class
        /// with the <see cref="PrepareListingReqBodyERC1155Item" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PrepareListingReqBodyERC1155Item.</param>
        public V1TsSdkV1OrderbookPrepareListingPostRequestSell(PrepareListingReqBodyERC1155Item actualInstance)
        {
            IsNullable = false;
            SchemaType = "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="V1TsSdkV1OrderbookPrepareListingPostRequestSell" /> class
        /// with the <see cref="PrepareListingReqBodyERC721Item" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PrepareListingReqBodyERC721Item.</param>
        public V1TsSdkV1OrderbookPrepareListingPostRequestSell(PrepareListingReqBodyERC721Item actualInstance)
        {
            IsNullable = false;
            SchemaType = "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(PrepareListingReqBodyERC1155Item))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(PrepareListingReqBodyERC721Item))
                {
                    _actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: PrepareListingReqBodyERC1155Item, PrepareListingReqBodyERC721Item");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `PrepareListingReqBodyERC1155Item`. If the actual instance is not `PrepareListingReqBodyERC1155Item`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PrepareListingReqBodyERC1155Item</returns>
        public PrepareListingReqBodyERC1155Item GetPrepareListingReqBodyERC1155Item()
        {
            return (PrepareListingReqBodyERC1155Item)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `PrepareListingReqBodyERC721Item`. If the actual instance is not `PrepareListingReqBodyERC721Item`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PrepareListingReqBodyERC721Item</returns>
        public PrepareListingReqBodyERC721Item GetPrepareListingReqBodyERC721Item()
        {
            return (PrepareListingReqBodyERC721Item)ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1TsSdkV1OrderbookPrepareListingPostRequestSell {\n");
            sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(ActualInstance, V1TsSdkV1OrderbookPrepareListingPostRequestSell.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of V1TsSdkV1OrderbookPrepareListingPostRequestSell
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of V1TsSdkV1OrderbookPrepareListingPostRequestSell</returns>
        public static V1TsSdkV1OrderbookPrepareListingPostRequestSell FromJson(string jsonString)
        {
            V1TsSdkV1OrderbookPrepareListingPostRequestSell newV1TsSdkV1OrderbookPrepareListingPostRequestSell = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newV1TsSdkV1OrderbookPrepareListingPostRequestSell;
            }

            try
            {
                newV1TsSdkV1OrderbookPrepareListingPostRequestSell = new V1TsSdkV1OrderbookPrepareListingPostRequestSell(JsonConvert.DeserializeObject<PrepareListingReqBodyERC1155Item>(jsonString, V1TsSdkV1OrderbookPrepareListingPostRequestSell.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newV1TsSdkV1OrderbookPrepareListingPostRequestSell;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PrepareListingReqBodyERC1155Item: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newV1TsSdkV1OrderbookPrepareListingPostRequestSell = new V1TsSdkV1OrderbookPrepareListingPostRequestSell(JsonConvert.DeserializeObject<PrepareListingReqBodyERC721Item>(jsonString, V1TsSdkV1OrderbookPrepareListingPostRequestSell.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newV1TsSdkV1OrderbookPrepareListingPostRequestSell;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into PrepareListingReqBodyERC721Item: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

    }

    /// <summary>
    /// Custom JSON converter for V1TsSdkV1OrderbookPrepareListingPostRequestSell
    /// </summary>
    public class V1TsSdkV1OrderbookPrepareListingPostRequestSellJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(V1TsSdkV1OrderbookPrepareListingPostRequestSell).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    return V1TsSdkV1OrderbookPrepareListingPostRequestSell.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return V1TsSdkV1OrderbookPrepareListingPostRequestSell.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
