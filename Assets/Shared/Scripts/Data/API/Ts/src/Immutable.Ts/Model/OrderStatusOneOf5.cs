/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Immutable.Ts.Model
{
    /// <summary>
    ///     OrderStatusOneOf5
    /// </summary>
    [DataContract(Name = "OrderStatus_oneOf_5")]
    public class OrderStatusOneOf5
    {
        /// <summary>
        ///     The order status that indicates the order is yet to be active due to various reasons.
        /// </summary>
        /// <value>The order status that indicates the order is yet to be active due to various reasons.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            ///     Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")] PENDING
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="OrderStatusOneOf5" /> class.
        /// </summary>
        /// <param name="evaluated">Whether the order has been evaluated after its creation.</param>
        /// <param name="name">The order status that indicates the order is yet to be active due to various reasons..</param>
        /// <param name="started">Whether the order has reached its specified start time.</param>
        public OrderStatusOneOf5(bool evaluated = default, NameEnum? name = default, bool started = default)
        {
            Evaluated = evaluated;
            Name = name;
            Started = started;
        }


        /// <summary>
        ///     The order status that indicates the order is yet to be active due to various reasons.
        /// </summary>
        /// <value>The order status that indicates the order is yet to be active due to various reasons.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public NameEnum? Name { get; set; }

        /// <summary>
        ///     Whether the order has been evaluated after its creation
        /// </summary>
        /// <value>Whether the order has been evaluated after its creation</value>
        [DataMember(Name = "evaluated", EmitDefaultValue = true)]
        public bool Evaluated { get; set; }

        /// <summary>
        ///     Whether the order has reached its specified start time
        /// </summary>
        /// <value>Whether the order has reached its specified start time</value>
        [DataMember(Name = "started", EmitDefaultValue = true)]
        public bool Started { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderStatusOneOf5 {\n");
            sb.Append("  Evaluated: ").Append(Evaluated).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}