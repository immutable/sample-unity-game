/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Ts.Client.OpenAPIDateConverter;

namespace Immutable.Ts.Model
{
    /// <summary>
    /// OrderStatusOneOf5
    /// </summary>
    [DataContract(Name = "OrderStatus_oneOf_5")]
    public partial class OrderStatusOneOf5
    {
        /// <summary>
        /// The order status that indicates the order is yet to be active due to various reasons.
        /// </summary>
        /// <value>The order status that indicates the order is yet to be active due to various reasons.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NameEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING
        }


        /// <summary>
        /// The order status that indicates the order is yet to be active due to various reasons.
        /// </summary>
        /// <value>The order status that indicates the order is yet to be active due to various reasons.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public NameEnum? Name { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderStatusOneOf5" /> class.
        /// </summary>
        /// <param name="evaluated">Whether the order has been evaluated after its creation.</param>
        /// <param name="name">The order status that indicates the order is yet to be active due to various reasons..</param>
        /// <param name="started">Whether the order has reached its specified start time.</param>
        public OrderStatusOneOf5(bool evaluated = default(bool), NameEnum? name = default(NameEnum?), bool started = default(bool))
        {
            this.Evaluated = evaluated;
            this.Name = name;
            this.Started = started;
        }

        /// <summary>
        /// Whether the order has been evaluated after its creation
        /// </summary>
        /// <value>Whether the order has been evaluated after its creation</value>
        [DataMember(Name = "evaluated", EmitDefaultValue = true)]
        public bool Evaluated { get; set; }

        /// <summary>
        /// Whether the order has reached its specified start time
        /// </summary>
        /// <value>Whether the order has reached its specified start time</value>
        [DataMember(Name = "started", EmitDefaultValue = true)]
        public bool Started { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderStatusOneOf5 {\n");
            sb.Append("  Evaluated: ").Append(Evaluated).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
