/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Immutable.Ts.Model
{
    /// <summary>
    ///     Response schema for the cancelOrder endpoint
    /// </summary>
    [DataContract(Name = "_v1_ts_sdk_orderbook_cancelOrdersOnChain_post_200_response")]
    public class V1TsSdkOrderbookCancelOrdersOnChainPost200Response
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="V1TsSdkOrderbookCancelOrdersOnChainPost200Response" /> class.
        /// </summary>
        /// <param name="cancellationAction">cancellationAction.</param>
        public V1TsSdkOrderbookCancelOrdersOnChainPost200Response(TransactionAction cancellationAction = default)
        {
            CancellationAction = cancellationAction;
        }

        /// <summary>
        ///     Gets or Sets CancellationAction
        /// </summary>
        [DataMember(Name = "cancellationAction", EmitDefaultValue = false)]
        public TransactionAction CancellationAction { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1TsSdkOrderbookCancelOrdersOnChainPost200Response {\n");
            sb.Append("  CancellationAction: ").Append(CancellationAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}