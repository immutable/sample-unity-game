/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Ts.Client.OpenAPIDateConverter;

namespace Immutable.Ts.Model
{
    /// <summary>
    /// PrepareListingResBodyOrderComponentsAllOfOffer
    /// </summary>
    [DataContract(Name = "prepareListingResBodyOrderComponents_allOf_offer")]
    public partial class PrepareListingResBodyOrderComponentsAllOfOffer
    {

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name = "itemType", EmitDefaultValue = false)]
        public PrepareListingResBodyItemType? ItemType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrepareListingResBodyOrderComponentsAllOfOffer" /> class.
        /// </summary>
        /// <param name="endAmount">endAmount.</param>
        /// <param name="identifierOrCriteria">identifierOrCriteria.</param>
        /// <param name="itemType">itemType.</param>
        /// <param name="startAmount">startAmount.</param>
        /// <param name="token">token.</param>
        public PrepareListingResBodyOrderComponentsAllOfOffer(string endAmount = default(string), string identifierOrCriteria = default(string), PrepareListingResBodyItemType? itemType = default(PrepareListingResBodyItemType?), string startAmount = default(string), string token = default(string))
        {
            this.EndAmount = endAmount;
            this.IdentifierOrCriteria = identifierOrCriteria;
            this.ItemType = itemType;
            this.StartAmount = startAmount;
            this.Token = token;
        }

        /// <summary>
        /// Gets or Sets EndAmount
        /// </summary>
        [DataMember(Name = "endAmount", EmitDefaultValue = false)]
        public string EndAmount { get; set; }

        /// <summary>
        /// Gets or Sets IdentifierOrCriteria
        /// </summary>
        [DataMember(Name = "identifierOrCriteria", EmitDefaultValue = false)]
        public string IdentifierOrCriteria { get; set; }

        /// <summary>
        /// Gets or Sets StartAmount
        /// </summary>
        [DataMember(Name = "startAmount", EmitDefaultValue = false)]
        public string StartAmount { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrepareListingResBodyOrderComponentsAllOfOffer {\n");
            sb.Append("  EndAmount: ").Append(EndAmount).Append("\n");
            sb.Append("  IdentifierOrCriteria: ").Append(IdentifierOrCriteria).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  StartAmount: ").Append(StartAmount).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
