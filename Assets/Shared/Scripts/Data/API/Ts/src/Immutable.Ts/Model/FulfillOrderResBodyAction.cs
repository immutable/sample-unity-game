/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Immutable.Ts.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Immutable.Ts.Model
{
    /// <summary>
    /// FulfillOrderResBodyAction
    /// </summary>
    [JsonConverter(typeof(FulfillOrderResBodyActionJsonConverter))]
    [DataContract(Name = "fulfillOrderResBodyAction")]
    public partial class FulfillOrderResBodyAction : AbstractOpenAPISchema
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillOrderResBodyAction" /> class
        /// with the <see cref="FulfillOrderResBodyTransactionAction" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of FulfillOrderResBodyTransactionAction.</param>
        public FulfillOrderResBodyAction(FulfillOrderResBodyTransactionAction actualInstance)
        {
            IsNullable = false;
            SchemaType = "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillOrderResBodyAction" /> class
        /// with the <see cref="FulfillOrderResBodySignableAction" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of FulfillOrderResBodySignableAction.</param>
        public FulfillOrderResBodyAction(FulfillOrderResBodySignableAction actualInstance)
        {
            IsNullable = false;
            SchemaType = "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(FulfillOrderResBodySignableAction))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(FulfillOrderResBodyTransactionAction))
                {
                    _actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: FulfillOrderResBodySignableAction, FulfillOrderResBodyTransactionAction");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `FulfillOrderResBodyTransactionAction`. If the actual instance is not `FulfillOrderResBodyTransactionAction`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of FulfillOrderResBodyTransactionAction</returns>
        public FulfillOrderResBodyTransactionAction GetFulfillOrderResBodyTransactionAction()
        {
            return (FulfillOrderResBodyTransactionAction)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `FulfillOrderResBodySignableAction`. If the actual instance is not `FulfillOrderResBodySignableAction`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of FulfillOrderResBodySignableAction</returns>
        public FulfillOrderResBodySignableAction GetFulfillOrderResBodySignableAction()
        {
            return (FulfillOrderResBodySignableAction)ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FulfillOrderResBodyAction {\n");
            sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(ActualInstance, FulfillOrderResBodyAction.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of FulfillOrderResBodyAction
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of FulfillOrderResBodyAction</returns>
        public static FulfillOrderResBodyAction FromJson(string jsonString)
        {
            FulfillOrderResBodyAction newFulfillOrderResBodyAction = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newFulfillOrderResBodyAction;
            }

            try
            {
                newFulfillOrderResBodyAction = new FulfillOrderResBodyAction(JsonConvert.DeserializeObject<FulfillOrderResBodySignableAction>(jsonString, FulfillOrderResBodyAction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newFulfillOrderResBodyAction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into FulfillOrderResBodySignableAction: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newFulfillOrderResBodyAction = new FulfillOrderResBodyAction(JsonConvert.DeserializeObject<FulfillOrderResBodyTransactionAction>(jsonString, FulfillOrderResBodyAction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newFulfillOrderResBodyAction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into FulfillOrderResBodyTransactionAction: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

    }

    /// <summary>
    /// Custom JSON converter for FulfillOrderResBodyAction
    /// </summary>
    public class FulfillOrderResBodyActionJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(FulfillOrderResBodyAction).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    return FulfillOrderResBodyAction.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return FulfillOrderResBodyAction.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
