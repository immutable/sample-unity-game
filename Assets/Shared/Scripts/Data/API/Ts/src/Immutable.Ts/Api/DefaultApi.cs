/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Immutable.Ts.Client;
using Immutable.Ts.Model;

namespace Immutable.Ts.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void V1HeartbeatGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1HeartbeatGetWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void V1HeartbeatHead();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V1HeartbeatHeadWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response</returns>
        V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response V1TsSdkV1OrderbookCancelOrdersOnChainPost(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest? v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response</returns>
        ApiResponse<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response> V1TsSdkV1OrderbookCancelOrdersOnChainPostWithHttpInfo(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest? v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookCancelOrdersPost200Response</returns>
        V1TsSdkV1OrderbookCancelOrdersPost200Response V1TsSdkV1OrderbookCancelOrdersPost(V1TsSdkV1OrderbookCancelOrdersPostRequest? v1TsSdkV1OrderbookCancelOrdersPostRequest = default(V1TsSdkV1OrderbookCancelOrdersPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookCancelOrdersPost200Response</returns>
        ApiResponse<V1TsSdkV1OrderbookCancelOrdersPost200Response> V1TsSdkV1OrderbookCancelOrdersPostWithHttpInfo(V1TsSdkV1OrderbookCancelOrdersPostRequest? v1TsSdkV1OrderbookCancelOrdersPostRequest = default(V1TsSdkV1OrderbookCancelOrdersPostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookCreateListingPost200Response</returns>
        V1TsSdkV1OrderbookCreateListingPost200Response V1TsSdkV1OrderbookCreateListingPost(V1TsSdkV1OrderbookCreateListingPostRequest? v1TsSdkV1OrderbookCreateListingPostRequest = default(V1TsSdkV1OrderbookCreateListingPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookCreateListingPost200Response</returns>
        ApiResponse<V1TsSdkV1OrderbookCreateListingPost200Response> V1TsSdkV1OrderbookCreateListingPostWithHttpInfo(V1TsSdkV1OrderbookCreateListingPostRequest? v1TsSdkV1OrderbookCreateListingPostRequest = default(V1TsSdkV1OrderbookCreateListingPostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookFulfillOrderPost200Response</returns>
        V1TsSdkV1OrderbookFulfillOrderPost200Response V1TsSdkV1OrderbookFulfillOrderPost(V1TsSdkV1OrderbookFulfillOrderPostRequest? v1TsSdkV1OrderbookFulfillOrderPostRequest = default(V1TsSdkV1OrderbookFulfillOrderPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookFulfillOrderPost200Response</returns>
        ApiResponse<V1TsSdkV1OrderbookFulfillOrderPost200Response> V1TsSdkV1OrderbookFulfillOrderPostWithHttpInfo(V1TsSdkV1OrderbookFulfillOrderPostRequest? v1TsSdkV1OrderbookFulfillOrderPostRequest = default(V1TsSdkV1OrderbookFulfillOrderPostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookPrepareListingPost200Response</returns>
        V1TsSdkV1OrderbookPrepareListingPost200Response V1TsSdkV1OrderbookPrepareListingPost(V1TsSdkV1OrderbookPrepareListingPostRequest? v1TsSdkV1OrderbookPrepareListingPostRequest = default(V1TsSdkV1OrderbookPrepareListingPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookPrepareListingPost200Response</returns>
        ApiResponse<V1TsSdkV1OrderbookPrepareListingPost200Response> V1TsSdkV1OrderbookPrepareListingPostWithHttpInfo(V1TsSdkV1OrderbookPrepareListingPostRequest? v1TsSdkV1OrderbookPrepareListingPostRequest = default(V1TsSdkV1OrderbookPrepareListingPostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response</returns>
        V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response V1TsSdkV1OrderbookPrepareOrderCancellationsPost(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest? v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response</returns>
        ApiResponse<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response> V1TsSdkV1OrderbookPrepareOrderCancellationsPostWithHttpInfo(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest? v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1HeartbeatGetAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1HeartbeatGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V1HeartbeatHeadAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V1HeartbeatHeadWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response> V1TsSdkV1OrderbookCancelOrdersOnChainPostAsync(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest? v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response>> V1TsSdkV1OrderbookCancelOrdersOnChainPostWithHttpInfoAsync(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest? v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookCancelOrdersPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkV1OrderbookCancelOrdersPost200Response> V1TsSdkV1OrderbookCancelOrdersPostAsync(V1TsSdkV1OrderbookCancelOrdersPostRequest? v1TsSdkV1OrderbookCancelOrdersPostRequest = default(V1TsSdkV1OrderbookCancelOrdersPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookCancelOrdersPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkV1OrderbookCancelOrdersPost200Response>> V1TsSdkV1OrderbookCancelOrdersPostWithHttpInfoAsync(V1TsSdkV1OrderbookCancelOrdersPostRequest? v1TsSdkV1OrderbookCancelOrdersPostRequest = default(V1TsSdkV1OrderbookCancelOrdersPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookCreateListingPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkV1OrderbookCreateListingPost200Response> V1TsSdkV1OrderbookCreateListingPostAsync(V1TsSdkV1OrderbookCreateListingPostRequest? v1TsSdkV1OrderbookCreateListingPostRequest = default(V1TsSdkV1OrderbookCreateListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookCreateListingPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkV1OrderbookCreateListingPost200Response>> V1TsSdkV1OrderbookCreateListingPostWithHttpInfoAsync(V1TsSdkV1OrderbookCreateListingPostRequest? v1TsSdkV1OrderbookCreateListingPostRequest = default(V1TsSdkV1OrderbookCreateListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookFulfillOrderPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkV1OrderbookFulfillOrderPost200Response> V1TsSdkV1OrderbookFulfillOrderPostAsync(V1TsSdkV1OrderbookFulfillOrderPostRequest? v1TsSdkV1OrderbookFulfillOrderPostRequest = default(V1TsSdkV1OrderbookFulfillOrderPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookFulfillOrderPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkV1OrderbookFulfillOrderPost200Response>> V1TsSdkV1OrderbookFulfillOrderPostWithHttpInfoAsync(V1TsSdkV1OrderbookFulfillOrderPostRequest? v1TsSdkV1OrderbookFulfillOrderPostRequest = default(V1TsSdkV1OrderbookFulfillOrderPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookPrepareListingPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkV1OrderbookPrepareListingPost200Response> V1TsSdkV1OrderbookPrepareListingPostAsync(V1TsSdkV1OrderbookPrepareListingPostRequest? v1TsSdkV1OrderbookPrepareListingPostRequest = default(V1TsSdkV1OrderbookPrepareListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookPrepareListingPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkV1OrderbookPrepareListingPost200Response>> V1TsSdkV1OrderbookPrepareListingPostWithHttpInfoAsync(V1TsSdkV1OrderbookPrepareListingPostRequest? v1TsSdkV1OrderbookPrepareListingPostRequest = default(V1TsSdkV1OrderbookPrepareListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response> V1TsSdkV1OrderbookPrepareOrderCancellationsPostAsync(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest? v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response>> V1TsSdkV1OrderbookPrepareOrderCancellationsPostWithHttpInfoAsync(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest? v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDisposable, IDefaultApi
    {
        private Immutable.Ts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = Immutable.Ts.Client.Configuration.MergeConfigurations(
                Immutable.Ts.Client.GlobalConfiguration.Instance,
                new Immutable.Ts.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Immutable.Ts.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Immutable.Ts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DefaultApi(Immutable.Ts.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Immutable.Ts.Client.Configuration.MergeConfigurations(
                Immutable.Ts.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Immutable.Ts.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Immutable.Ts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DefaultApi(Immutable.Ts.Client.ISynchronousClient client, Immutable.Ts.Client.IAsynchronousClient asyncClient, Immutable.Ts.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Immutable.Ts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Immutable.Ts.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Immutable.Ts.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Immutable.Ts.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Immutable.Ts.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Immutable.Ts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void V1HeartbeatGet()
        {
            V1HeartbeatGetWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Immutable.Ts.Client.ApiResponse<Object> V1HeartbeatGetWithHttpInfo()
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/v1/heartbeat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1HeartbeatGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1HeartbeatGetAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1HeartbeatGetWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<Object>> V1HeartbeatGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<Object>("/v1/heartbeat", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1HeartbeatGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void V1HeartbeatHead()
        {
            V1HeartbeatHeadWithHttpInfo();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Immutable.Ts.Client.ApiResponse<Object> V1HeartbeatHeadWithHttpInfo()
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Head<Object>("/v1/heartbeat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1HeartbeatHead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V1HeartbeatHeadAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1HeartbeatHeadWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<Object>> V1HeartbeatHeadWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var task = this.AsynchronousClient.HeadAsync<Object>("/v1/heartbeat", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1HeartbeatHead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response</returns>
        public V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response V1TsSdkV1OrderbookCancelOrdersOnChainPost(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest? v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response> localVarResponse = V1TsSdkV1OrderbookCancelOrdersOnChainPostWithHttpInfo(v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response> V1TsSdkV1OrderbookCancelOrdersOnChainPostWithHttpInfo(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest? v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response>("/v1/ts-sdk/v1/orderbook/cancelOrdersOnChain", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookCancelOrdersOnChainPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response> V1TsSdkV1OrderbookCancelOrdersOnChainPostAsync(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest? v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkV1OrderbookCancelOrdersOnChainPostWithHttpInfoAsync(v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response>> V1TsSdkV1OrderbookCancelOrdersOnChainPostWithHttpInfoAsync(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest? v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkV1OrderbookCancelOrdersOnChainPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookCancelOrdersOnChainPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkV1OrderbookCancelOrdersOnChainPost200Response>("/v1/ts-sdk/v1/orderbook/cancelOrdersOnChain", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookCancelOrdersOnChainPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookCancelOrdersPost200Response</returns>
        public V1TsSdkV1OrderbookCancelOrdersPost200Response V1TsSdkV1OrderbookCancelOrdersPost(V1TsSdkV1OrderbookCancelOrdersPostRequest? v1TsSdkV1OrderbookCancelOrdersPostRequest = default(V1TsSdkV1OrderbookCancelOrdersPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCancelOrdersPost200Response> localVarResponse = V1TsSdkV1OrderbookCancelOrdersPostWithHttpInfo(v1TsSdkV1OrderbookCancelOrdersPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookCancelOrdersPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCancelOrdersPost200Response> V1TsSdkV1OrderbookCancelOrdersPostWithHttpInfo(V1TsSdkV1OrderbookCancelOrdersPostRequest? v1TsSdkV1OrderbookCancelOrdersPostRequest = default(V1TsSdkV1OrderbookCancelOrdersPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookCancelOrdersPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkV1OrderbookCancelOrdersPost200Response>("/v1/ts-sdk/v1/orderbook/cancelOrders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookCancelOrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookCancelOrdersPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkV1OrderbookCancelOrdersPost200Response> V1TsSdkV1OrderbookCancelOrdersPostAsync(V1TsSdkV1OrderbookCancelOrdersPostRequest? v1TsSdkV1OrderbookCancelOrdersPostRequest = default(V1TsSdkV1OrderbookCancelOrdersPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkV1OrderbookCancelOrdersPostWithHttpInfoAsync(v1TsSdkV1OrderbookCancelOrdersPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCancelOrdersPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCancelOrdersPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookCancelOrdersPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCancelOrdersPost200Response>> V1TsSdkV1OrderbookCancelOrdersPostWithHttpInfoAsync(V1TsSdkV1OrderbookCancelOrdersPostRequest? v1TsSdkV1OrderbookCancelOrdersPostRequest = default(V1TsSdkV1OrderbookCancelOrdersPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookCancelOrdersPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkV1OrderbookCancelOrdersPost200Response>("/v1/ts-sdk/v1/orderbook/cancelOrders", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookCancelOrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookCreateListingPost200Response</returns>
        public V1TsSdkV1OrderbookCreateListingPost200Response V1TsSdkV1OrderbookCreateListingPost(V1TsSdkV1OrderbookCreateListingPostRequest? v1TsSdkV1OrderbookCreateListingPostRequest = default(V1TsSdkV1OrderbookCreateListingPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCreateListingPost200Response> localVarResponse = V1TsSdkV1OrderbookCreateListingPostWithHttpInfo(v1TsSdkV1OrderbookCreateListingPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookCreateListingPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCreateListingPost200Response> V1TsSdkV1OrderbookCreateListingPostWithHttpInfo(V1TsSdkV1OrderbookCreateListingPostRequest? v1TsSdkV1OrderbookCreateListingPostRequest = default(V1TsSdkV1OrderbookCreateListingPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookCreateListingPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkV1OrderbookCreateListingPost200Response>("/v1/ts-sdk/v1/orderbook/createListing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookCreateListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookCreateListingPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkV1OrderbookCreateListingPost200Response> V1TsSdkV1OrderbookCreateListingPostAsync(V1TsSdkV1OrderbookCreateListingPostRequest? v1TsSdkV1OrderbookCreateListingPostRequest = default(V1TsSdkV1OrderbookCreateListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkV1OrderbookCreateListingPostWithHttpInfoAsync(v1TsSdkV1OrderbookCreateListingPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCreateListingPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCreateListingPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookCreateListingPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookCreateListingPost200Response>> V1TsSdkV1OrderbookCreateListingPostWithHttpInfoAsync(V1TsSdkV1OrderbookCreateListingPostRequest? v1TsSdkV1OrderbookCreateListingPostRequest = default(V1TsSdkV1OrderbookCreateListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookCreateListingPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkV1OrderbookCreateListingPost200Response>("/v1/ts-sdk/v1/orderbook/createListing", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookCreateListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookFulfillOrderPost200Response</returns>
        public V1TsSdkV1OrderbookFulfillOrderPost200Response V1TsSdkV1OrderbookFulfillOrderPost(V1TsSdkV1OrderbookFulfillOrderPostRequest? v1TsSdkV1OrderbookFulfillOrderPostRequest = default(V1TsSdkV1OrderbookFulfillOrderPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookFulfillOrderPost200Response> localVarResponse = V1TsSdkV1OrderbookFulfillOrderPostWithHttpInfo(v1TsSdkV1OrderbookFulfillOrderPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookFulfillOrderPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookFulfillOrderPost200Response> V1TsSdkV1OrderbookFulfillOrderPostWithHttpInfo(V1TsSdkV1OrderbookFulfillOrderPostRequest? v1TsSdkV1OrderbookFulfillOrderPostRequest = default(V1TsSdkV1OrderbookFulfillOrderPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookFulfillOrderPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkV1OrderbookFulfillOrderPost200Response>("/v1/ts-sdk/v1/orderbook/fulfillOrder", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookFulfillOrderPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookFulfillOrderPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkV1OrderbookFulfillOrderPost200Response> V1TsSdkV1OrderbookFulfillOrderPostAsync(V1TsSdkV1OrderbookFulfillOrderPostRequest? v1TsSdkV1OrderbookFulfillOrderPostRequest = default(V1TsSdkV1OrderbookFulfillOrderPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkV1OrderbookFulfillOrderPostWithHttpInfoAsync(v1TsSdkV1OrderbookFulfillOrderPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookFulfillOrderPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookFulfillOrderPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookFulfillOrderPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookFulfillOrderPost200Response>> V1TsSdkV1OrderbookFulfillOrderPostWithHttpInfoAsync(V1TsSdkV1OrderbookFulfillOrderPostRequest? v1TsSdkV1OrderbookFulfillOrderPostRequest = default(V1TsSdkV1OrderbookFulfillOrderPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookFulfillOrderPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkV1OrderbookFulfillOrderPost200Response>("/v1/ts-sdk/v1/orderbook/fulfillOrder", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookFulfillOrderPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookPrepareListingPost200Response</returns>
        public V1TsSdkV1OrderbookPrepareListingPost200Response V1TsSdkV1OrderbookPrepareListingPost(V1TsSdkV1OrderbookPrepareListingPostRequest? v1TsSdkV1OrderbookPrepareListingPostRequest = default(V1TsSdkV1OrderbookPrepareListingPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookPrepareListingPost200Response> localVarResponse = V1TsSdkV1OrderbookPrepareListingPostWithHttpInfo(v1TsSdkV1OrderbookPrepareListingPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookPrepareListingPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookPrepareListingPost200Response> V1TsSdkV1OrderbookPrepareListingPostWithHttpInfo(V1TsSdkV1OrderbookPrepareListingPostRequest? v1TsSdkV1OrderbookPrepareListingPostRequest = default(V1TsSdkV1OrderbookPrepareListingPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookPrepareListingPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkV1OrderbookPrepareListingPost200Response>("/v1/ts-sdk/v1/orderbook/prepareListing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookPrepareListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookPrepareListingPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkV1OrderbookPrepareListingPost200Response> V1TsSdkV1OrderbookPrepareListingPostAsync(V1TsSdkV1OrderbookPrepareListingPostRequest? v1TsSdkV1OrderbookPrepareListingPostRequest = default(V1TsSdkV1OrderbookPrepareListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkV1OrderbookPrepareListingPostWithHttpInfoAsync(v1TsSdkV1OrderbookPrepareListingPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookPrepareListingPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookPrepareListingPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookPrepareListingPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookPrepareListingPost200Response>> V1TsSdkV1OrderbookPrepareListingPostWithHttpInfoAsync(V1TsSdkV1OrderbookPrepareListingPostRequest? v1TsSdkV1OrderbookPrepareListingPostRequest = default(V1TsSdkV1OrderbookPrepareListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookPrepareListingPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkV1OrderbookPrepareListingPost200Response>("/v1/ts-sdk/v1/orderbook/prepareListing", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookPrepareListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response</returns>
        public V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response V1TsSdkV1OrderbookPrepareOrderCancellationsPost(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest? v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response> localVarResponse = V1TsSdkV1OrderbookPrepareOrderCancellationsPostWithHttpInfo(v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response> V1TsSdkV1OrderbookPrepareOrderCancellationsPostWithHttpInfo(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest? v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response>("/v1/ts-sdk/v1/orderbook/prepareOrderCancellations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookPrepareOrderCancellationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response> V1TsSdkV1OrderbookPrepareOrderCancellationsPostAsync(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest? v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkV1OrderbookPrepareOrderCancellationsPostWithHttpInfoAsync(v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response>> V1TsSdkV1OrderbookPrepareOrderCancellationsPostWithHttpInfoAsync(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest? v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkV1OrderbookPrepareOrderCancellationsPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkV1OrderbookPrepareOrderCancellationsPost200Response>("/v1/ts-sdk/v1/orderbook/prepareOrderCancellations", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkV1OrderbookPrepareOrderCancellationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
