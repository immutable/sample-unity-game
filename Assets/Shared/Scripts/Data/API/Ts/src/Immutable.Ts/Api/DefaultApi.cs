/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Immutable.Ts.Client;
using Immutable.Ts.Model;

namespace Immutable.Ts.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V1HeartbeatGet200Response</returns>
        V1HeartbeatGet200Response V1HeartbeatGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V1HeartbeatGet200Response</returns>
        ApiResponse<V1HeartbeatGet200Response> V1HeartbeatGetWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V1HeartbeatGet200Response</returns>
        V1HeartbeatGet200Response V1HeartbeatHead();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V1HeartbeatGet200Response</returns>
        ApiResponse<V1HeartbeatGet200Response> V1HeartbeatHeadWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        V1TsSdkOrderbookCancelOrdersOnChainPost200Response V1TsSdkOrderbookCancelOrdersOnChainPost(V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkOrderbookCancelOrdersOnChainPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response> V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfo(V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkOrderbookCancelOrdersOnChainPostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        V1TsSdkOrderbookCancelOrdersPost200Response V1TsSdkOrderbookCancelOrdersPost(V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default(V1TsSdkOrderbookCancelOrdersPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response> V1TsSdkOrderbookCancelOrdersPostWithHttpInfo(V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default(V1TsSdkOrderbookCancelOrdersPostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCreateListingPost200Response</returns>
        V1TsSdkOrderbookCreateListingPost200Response V1TsSdkOrderbookCreateListingPost(V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default(V1TsSdkOrderbookCreateListingPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCreateListingPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookCreateListingPost200Response> V1TsSdkOrderbookCreateListingPostWithHttpInfo(V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default(V1TsSdkOrderbookCreateListingPostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        V1TsSdkOrderbookFulfillOrderPost200Response V1TsSdkOrderbookFulfillOrderPost(V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default(V1TsSdkOrderbookFulfillOrderPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response> V1TsSdkOrderbookFulfillOrderPostWithHttpInfo(V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default(V1TsSdkOrderbookFulfillOrderPostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookPrepareListingPost200Response</returns>
        V1TsSdkOrderbookPrepareListingPost200Response V1TsSdkOrderbookPrepareListingPost(V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default(V1TsSdkOrderbookPrepareListingPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookPrepareListingPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response> V1TsSdkOrderbookPrepareListingPostWithHttpInfo(V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default(V1TsSdkOrderbookPrepareListingPostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        V1TsSdkOrderbookPrepareOrderCancellationsPost200Response V1TsSdkOrderbookPrepareOrderCancellationsPost(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest? v1TsSdkOrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response> V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfo(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest? v1TsSdkOrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1HeartbeatGet200Response</returns>
        System.Threading.Tasks.Task<V1HeartbeatGet200Response> V1HeartbeatGetAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1HeartbeatGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1HeartbeatGet200Response>> V1HeartbeatGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1HeartbeatGet200Response</returns>
        System.Threading.Tasks.Task<V1HeartbeatGet200Response> V1HeartbeatHeadAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1HeartbeatGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1HeartbeatGet200Response>> V1HeartbeatHeadWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkOrderbookCancelOrdersOnChainPost200Response> V1TsSdkOrderbookCancelOrdersOnChainPostAsync(V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkOrderbookCancelOrdersOnChainPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCancelOrdersOnChainPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>> V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfoAsync(V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkOrderbookCancelOrdersOnChainPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkOrderbookCancelOrdersPost200Response> V1TsSdkOrderbookCancelOrdersPostAsync(V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default(V1TsSdkOrderbookCancelOrdersPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCancelOrdersPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response>> V1TsSdkOrderbookCancelOrdersPostWithHttpInfoAsync(V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default(V1TsSdkOrderbookCancelOrdersPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCreateListingPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkOrderbookCreateListingPost200Response> V1TsSdkOrderbookCreateListingPostAsync(V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default(V1TsSdkOrderbookCreateListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCreateListingPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkOrderbookCreateListingPost200Response>> V1TsSdkOrderbookCreateListingPostWithHttpInfoAsync(V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default(V1TsSdkOrderbookCreateListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkOrderbookFulfillOrderPost200Response> V1TsSdkOrderbookFulfillOrderPostAsync(V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default(V1TsSdkOrderbookFulfillOrderPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookFulfillOrderPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response>> V1TsSdkOrderbookFulfillOrderPostWithHttpInfoAsync(V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default(V1TsSdkOrderbookFulfillOrderPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookPrepareListingPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkOrderbookPrepareListingPost200Response> V1TsSdkOrderbookPrepareListingPostAsync(V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default(V1TsSdkOrderbookPrepareListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookPrepareListingPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response>> V1TsSdkOrderbookPrepareListingPostWithHttpInfoAsync(V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default(V1TsSdkOrderbookPrepareListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        System.Threading.Tasks.Task<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response> V1TsSdkOrderbookPrepareOrderCancellationsPostAsync(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest? v1TsSdkOrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookPrepareOrderCancellationsPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>> V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfoAsync(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest? v1TsSdkOrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDisposable, IDefaultApi
    {
        private Immutable.Ts.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = Immutable.Ts.Client.Configuration.MergeConfigurations(
                Immutable.Ts.Client.GlobalConfiguration.Instance,
                new Immutable.Ts.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Immutable.Ts.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Immutable.Ts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DefaultApi(Immutable.Ts.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Immutable.Ts.Client.Configuration.MergeConfigurations(
                Immutable.Ts.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Immutable.Ts.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Immutable.Ts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DefaultApi(Immutable.Ts.Client.ISynchronousClient client, Immutable.Ts.Client.IAsynchronousClient asyncClient, Immutable.Ts.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Immutable.Ts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Immutable.Ts.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Immutable.Ts.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Immutable.Ts.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Immutable.Ts.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Immutable.Ts.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V1HeartbeatGet200Response</returns>
        public V1HeartbeatGet200Response V1HeartbeatGet()
        {
            Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response> localVarResponse = V1HeartbeatGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V1HeartbeatGet200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response> V1HeartbeatGetWithHttpInfo()
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<V1HeartbeatGet200Response>("/v1/heartbeat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1HeartbeatGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1HeartbeatGet200Response</returns>
        public async System.Threading.Tasks.Task<V1HeartbeatGet200Response> V1HeartbeatGetAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1HeartbeatGetWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1HeartbeatGet200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response>> V1HeartbeatGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<V1HeartbeatGet200Response>("/v1/heartbeat", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1HeartbeatGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V1HeartbeatGet200Response</returns>
        public V1HeartbeatGet200Response V1HeartbeatHead()
        {
            Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response> localVarResponse = V1HeartbeatHeadWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V1HeartbeatGet200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response> V1HeartbeatHeadWithHttpInfo()
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Head<V1HeartbeatGet200Response>("/v1/heartbeat", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1HeartbeatHead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1HeartbeatGet200Response</returns>
        public async System.Threading.Tasks.Task<V1HeartbeatGet200Response> V1HeartbeatHeadAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1HeartbeatHeadWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1HeartbeatGet200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response>> V1HeartbeatHeadWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var task = this.AsynchronousClient.HeadAsync<V1HeartbeatGet200Response>("/v1/heartbeat", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1HeartbeatHead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        public V1TsSdkOrderbookCancelOrdersOnChainPost200Response V1TsSdkOrderbookCancelOrdersOnChainPost(V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkOrderbookCancelOrdersOnChainPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response> localVarResponse = V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfo(v1TsSdkOrderbookCancelOrdersOnChainPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response> V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfo(V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkOrderbookCancelOrdersOnChainPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCancelOrdersOnChainPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>("/v1/ts-sdk/orderbook/cancelOrdersOnChain", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookCancelOrdersOnChainPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkOrderbookCancelOrdersOnChainPost200Response> V1TsSdkOrderbookCancelOrdersOnChainPostAsync(V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkOrderbookCancelOrdersOnChainPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfoAsync(v1TsSdkOrderbookCancelOrdersOnChainPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCancelOrdersOnChainPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>> V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfoAsync(V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default(V1TsSdkOrderbookCancelOrdersOnChainPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCancelOrdersOnChainPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>("/v1/ts-sdk/orderbook/cancelOrdersOnChain", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookCancelOrdersOnChainPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        public V1TsSdkOrderbookCancelOrdersPost200Response V1TsSdkOrderbookCancelOrdersPost(V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default(V1TsSdkOrderbookCancelOrdersPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response> localVarResponse = V1TsSdkOrderbookCancelOrdersPostWithHttpInfo(v1TsSdkOrderbookCancelOrdersPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response> V1TsSdkOrderbookCancelOrdersPostWithHttpInfo(V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default(V1TsSdkOrderbookCancelOrdersPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCancelOrdersPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkOrderbookCancelOrdersPost200Response>("/v1/ts-sdk/orderbook/cancelOrders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookCancelOrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkOrderbookCancelOrdersPost200Response> V1TsSdkOrderbookCancelOrdersPostAsync(V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default(V1TsSdkOrderbookCancelOrdersPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkOrderbookCancelOrdersPostWithHttpInfoAsync(v1TsSdkOrderbookCancelOrdersPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCancelOrdersPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response>> V1TsSdkOrderbookCancelOrdersPostWithHttpInfoAsync(V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default(V1TsSdkOrderbookCancelOrdersPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCancelOrdersPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkOrderbookCancelOrdersPost200Response>("/v1/ts-sdk/orderbook/cancelOrders", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookCancelOrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCreateListingPost200Response</returns>
        public V1TsSdkOrderbookCreateListingPost200Response V1TsSdkOrderbookCreateListingPost(V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default(V1TsSdkOrderbookCreateListingPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCreateListingPost200Response> localVarResponse = V1TsSdkOrderbookCreateListingPostWithHttpInfo(v1TsSdkOrderbookCreateListingPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCreateListingPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCreateListingPost200Response> V1TsSdkOrderbookCreateListingPostWithHttpInfo(V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default(V1TsSdkOrderbookCreateListingPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCreateListingPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkOrderbookCreateListingPost200Response>("/v1/ts-sdk/orderbook/createListing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookCreateListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCreateListingPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkOrderbookCreateListingPost200Response> V1TsSdkOrderbookCreateListingPostAsync(V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default(V1TsSdkOrderbookCreateListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkOrderbookCreateListingPostWithHttpInfoAsync(v1TsSdkOrderbookCreateListingPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCreateListingPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCreateListingPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCreateListingPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCreateListingPost200Response>> V1TsSdkOrderbookCreateListingPostWithHttpInfoAsync(V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default(V1TsSdkOrderbookCreateListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCreateListingPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkOrderbookCreateListingPost200Response>("/v1/ts-sdk/orderbook/createListing", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookCreateListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        public V1TsSdkOrderbookFulfillOrderPost200Response V1TsSdkOrderbookFulfillOrderPost(V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default(V1TsSdkOrderbookFulfillOrderPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response> localVarResponse = V1TsSdkOrderbookFulfillOrderPostWithHttpInfo(v1TsSdkOrderbookFulfillOrderPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response> V1TsSdkOrderbookFulfillOrderPostWithHttpInfo(V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default(V1TsSdkOrderbookFulfillOrderPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookFulfillOrderPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkOrderbookFulfillOrderPost200Response>("/v1/ts-sdk/orderbook/fulfillOrder", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookFulfillOrderPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkOrderbookFulfillOrderPost200Response> V1TsSdkOrderbookFulfillOrderPostAsync(V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default(V1TsSdkOrderbookFulfillOrderPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkOrderbookFulfillOrderPostWithHttpInfoAsync(v1TsSdkOrderbookFulfillOrderPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookFulfillOrderPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response>> V1TsSdkOrderbookFulfillOrderPostWithHttpInfoAsync(V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default(V1TsSdkOrderbookFulfillOrderPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookFulfillOrderPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkOrderbookFulfillOrderPost200Response>("/v1/ts-sdk/orderbook/fulfillOrder", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookFulfillOrderPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookPrepareListingPost200Response</returns>
        public V1TsSdkOrderbookPrepareListingPost200Response V1TsSdkOrderbookPrepareListingPost(V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default(V1TsSdkOrderbookPrepareListingPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response> localVarResponse = V1TsSdkOrderbookPrepareListingPostWithHttpInfo(v1TsSdkOrderbookPrepareListingPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookPrepareListingPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response> V1TsSdkOrderbookPrepareListingPostWithHttpInfo(V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default(V1TsSdkOrderbookPrepareListingPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookPrepareListingPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkOrderbookPrepareListingPost200Response>("/v1/ts-sdk/orderbook/prepareListing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookPrepareListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookPrepareListingPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkOrderbookPrepareListingPost200Response> V1TsSdkOrderbookPrepareListingPostAsync(V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default(V1TsSdkOrderbookPrepareListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkOrderbookPrepareListingPostWithHttpInfoAsync(v1TsSdkOrderbookPrepareListingPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookPrepareListingPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response>> V1TsSdkOrderbookPrepareListingPostWithHttpInfoAsync(V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default(V1TsSdkOrderbookPrepareListingPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookPrepareListingPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkOrderbookPrepareListingPost200Response>("/v1/ts-sdk/orderbook/prepareListing", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookPrepareListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        public V1TsSdkOrderbookPrepareOrderCancellationsPost200Response V1TsSdkOrderbookPrepareOrderCancellationsPost(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest? v1TsSdkOrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?))
        {
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response> localVarResponse = V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfo(v1TsSdkOrderbookPrepareOrderCancellationsPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        public Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response> V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfo(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest? v1TsSdkOrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?))
        {
            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookPrepareOrderCancellationsPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>("/v1/ts-sdk/orderbook/prepareOrderCancellations", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookPrepareOrderCancellationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        public async System.Threading.Tasks.Task<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response> V1TsSdkOrderbookPrepareOrderCancellationsPostAsync(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest? v1TsSdkOrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            var task = V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfoAsync(v1TsSdkOrderbookPrepareOrderCancellationsPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookPrepareOrderCancellationsPost200Response)</returns>
        public async System.Threading.Tasks.Task<Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>> V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfoAsync(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest? v1TsSdkOrderbookPrepareOrderCancellationsPostRequest = default(V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Immutable.Ts.Client.RequestOptions localVarRequestOptions = new Immutable.Ts.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Immutable.Ts.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Immutable.Ts.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookPrepareOrderCancellationsPostRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>("/v1/ts-sdk/orderbook/prepareOrderCancellations", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1TsSdkOrderbookPrepareOrderCancellationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
