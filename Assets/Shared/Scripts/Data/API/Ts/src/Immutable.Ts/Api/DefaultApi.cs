/*
 * TS SDK API
 *
 * running ts sdk as an api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using Immutable.Ts.Client;
using Immutable.Ts.Model;

namespace Immutable.Ts.Api
{
    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V1HeartbeatGet200Response</returns>
        V1HeartbeatGet200Response V1HeartbeatGet();

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V1HeartbeatGet200Response</returns>
        ApiResponse<V1HeartbeatGet200Response> V1HeartbeatGetWithHttpInfo();

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V1HeartbeatGet200Response</returns>
        V1HeartbeatGet200Response V1HeartbeatHead();

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V1HeartbeatGet200Response</returns>
        ApiResponse<V1HeartbeatGet200Response> V1HeartbeatHeadWithHttpInfo();

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        V1TsSdkOrderbookCancelOrdersOnChainPost200Response V1TsSdkOrderbookCancelOrdersOnChainPost(
            V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>
            V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfo(
                V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest =
                    default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        V1TsSdkOrderbookCancelOrdersPost200Response V1TsSdkOrderbookCancelOrdersPost(
            V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response> V1TsSdkOrderbookCancelOrdersPostWithHttpInfo(
            V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCreateListingPost200Response</returns>
        V1TsSdkOrderbookCreateListingPost200Response V1TsSdkOrderbookCreateListingPost(
            V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCreateListingPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookCreateListingPost200Response> V1TsSdkOrderbookCreateListingPostWithHttpInfo(
            V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        V1TsSdkOrderbookFulfillOrderPost200Response V1TsSdkOrderbookFulfillOrderPost(
            V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response> V1TsSdkOrderbookFulfillOrderPostWithHttpInfo(
            V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookPrepareListingPost200Response</returns>
        V1TsSdkOrderbookPrepareListingPost200Response V1TsSdkOrderbookPrepareListingPost(
            V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookPrepareListingPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response> V1TsSdkOrderbookPrepareListingPostWithHttpInfo(
            V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default);

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        V1TsSdkOrderbookPrepareOrderCancellationsPost200Response V1TsSdkOrderbookPrepareOrderCancellationsPost(
            V1TsSdkOrderbookPrepareOrderCancellationsPostRequest? v1TsSdkOrderbookPrepareOrderCancellationsPostRequest =
                default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>
            V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfo(
                V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?
                    v1TsSdkOrderbookPrepareOrderCancellationsPostRequest =
                    default);

        #endregion Synchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1HeartbeatGet200Response</returns>
        Task<V1HeartbeatGet200Response> V1HeartbeatGetAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1HeartbeatGet200Response)</returns>
        Task<ApiResponse<V1HeartbeatGet200Response>> V1HeartbeatGetWithHttpInfoAsync(
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1HeartbeatGet200Response</returns>
        Task<V1HeartbeatGet200Response> V1HeartbeatHeadAsync(CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1HeartbeatGet200Response)</returns>
        Task<ApiResponse<V1HeartbeatGet200Response>> V1HeartbeatHeadWithHttpInfoAsync(
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        Task<V1TsSdkOrderbookCancelOrdersOnChainPost200Response> V1TsSdkOrderbookCancelOrdersOnChainPostAsync(
            V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCancelOrdersOnChainPost200Response)</returns>
        Task<ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>>
            V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfoAsync(
                V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest =
                    default,
                CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        Task<V1TsSdkOrderbookCancelOrdersPost200Response> V1TsSdkOrderbookCancelOrdersPostAsync(
            V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCancelOrdersPost200Response)</returns>
        Task<ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response>>
            V1TsSdkOrderbookCancelOrdersPostWithHttpInfoAsync(
                V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default,
                CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCreateListingPost200Response</returns>
        Task<V1TsSdkOrderbookCreateListingPost200Response> V1TsSdkOrderbookCreateListingPostAsync(
            V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCreateListingPost200Response)</returns>
        Task<ApiResponse<V1TsSdkOrderbookCreateListingPost200Response>>
            V1TsSdkOrderbookCreateListingPostWithHttpInfoAsync(
                V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default,
                CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        Task<V1TsSdkOrderbookFulfillOrderPost200Response> V1TsSdkOrderbookFulfillOrderPostAsync(
            V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookFulfillOrderPost200Response)</returns>
        Task<ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response>>
            V1TsSdkOrderbookFulfillOrderPostWithHttpInfoAsync(
                V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default,
                CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookPrepareListingPost200Response</returns>
        Task<V1TsSdkOrderbookPrepareListingPost200Response> V1TsSdkOrderbookPrepareListingPostAsync(
            V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default,
            CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookPrepareListingPost200Response)</returns>
        Task<ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response>>
            V1TsSdkOrderbookPrepareListingPostWithHttpInfoAsync(
                V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default,
                CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        Task<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>
            V1TsSdkOrderbookPrepareOrderCancellationsPostAsync(
                V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?
                    v1TsSdkOrderbookPrepareOrderCancellationsPostRequest =
                    default, CancellationToken cancellationToken = default);

        /// <summary>
        /// </summary>
        /// <remarks>
        /// </remarks>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookPrepareOrderCancellationsPost200Response)</returns>
        Task<ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>>
            V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfoAsync(
                V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?
                    v1TsSdkOrderbookPrepareOrderCancellationsPostRequest =
                    default, CancellationToken cancellationToken = default);

        #endregion Asynchronous Operations
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {
    }

    /// <summary>
    ///     Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DefaultApi : IDisposable, IDefaultApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="DefaultApi" /> class.
        ///     **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        ///     It's better to reuse the
        ///     <see
        ///         href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">
        ///         HttpClient
        ///         and HttpClientHandler
        ///     </see>
        ///     .
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DefaultApi" /> class.
        ///     **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        ///     It's better to reuse the
        ///     <see
        ///         href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">
        ///         HttpClient
        ///         and HttpClientHandler
        ///     </see>
        ///     .
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            Configuration = Ts.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = Ts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DefaultApi" /> class using Configuration object.
        ///     **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        ///     It's better to reuse the
        ///     <see
        ///         href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">
        ///         HttpClient
        ///         and HttpClientHandler
        ///     </see>
        ///     .
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public DefaultApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            Configuration = Ts.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            ApiClient = new ApiClient(Configuration.BasePath);
            Client = ApiClient;
            AsynchronousClient = ApiClient;
            ExceptionFactory = Ts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="DefaultApi" /> class
        ///     using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public DefaultApi(ISynchronousClient client, IAsynchronousClient asyncClient,
            IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            Client = client;
            AsynchronousClient = asyncClient;
            Configuration = configuration;
            ExceptionFactory = Ts.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Holds the ApiClient if created
        /// </summary>
        public ApiClient ApiClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        ///     The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.BasePath;
        }

        /// <summary>
        ///     Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        ///     Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V1HeartbeatGet200Response</returns>
        public V1HeartbeatGet200Response V1HeartbeatGet()
        {
            var localVarResponse = V1HeartbeatGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V1HeartbeatGet200Response</returns>
        public ApiResponse<V1HeartbeatGet200Response> V1HeartbeatGetWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // make the HTTP request
            var localVarResponse =
                Client.Get<V1HeartbeatGet200Response>("/v1/heartbeat", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1HeartbeatGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1HeartbeatGet200Response</returns>
        public async Task<V1HeartbeatGet200Response> V1HeartbeatGetAsync(CancellationToken cancellationToken = default)
        {
            var task = V1HeartbeatGetWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1HeartbeatGet200Response)</returns>
        public async Task<ApiResponse<V1HeartbeatGet200Response>> V1HeartbeatGetWithHttpInfoAsync(
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // make the HTTP request

            var task = AsynchronousClient.GetAsync<V1HeartbeatGet200Response>("/v1/heartbeat", localVarRequestOptions,
                Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1HeartbeatGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V1HeartbeatGet200Response</returns>
        public V1HeartbeatGet200Response V1HeartbeatHead()
        {
            var localVarResponse = V1HeartbeatHeadWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V1HeartbeatGet200Response</returns>
        public ApiResponse<V1HeartbeatGet200Response> V1HeartbeatHeadWithHttpInfo()
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // make the HTTP request
            var localVarResponse =
                Client.Head<V1HeartbeatGet200Response>("/v1/heartbeat", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1HeartbeatHead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1HeartbeatGet200Response</returns>
        public async Task<V1HeartbeatGet200Response> V1HeartbeatHeadAsync(CancellationToken cancellationToken = default)
        {
            var task = V1HeartbeatHeadWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1HeartbeatGet200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1HeartbeatGet200Response)</returns>
        public async Task<ApiResponse<V1HeartbeatGet200Response>> V1HeartbeatHeadWithHttpInfoAsync(
            CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // make the HTTP request

            var task = AsynchronousClient.HeadAsync<V1HeartbeatGet200Response>("/v1/heartbeat", localVarRequestOptions,
                Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1HeartbeatHead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        public V1TsSdkOrderbookCancelOrdersOnChainPost200Response V1TsSdkOrderbookCancelOrdersOnChainPost(
            V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest = default)
        {
            var localVarResponse =
                V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfo(v1TsSdkOrderbookCancelOrdersOnChainPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        public ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>
            V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfo(
                V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest =
                    default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCancelOrdersOnChainPostRequest;


            // make the HTTP request
            var localVarResponse =
                Client.Post<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>(
                    "/v1/ts-sdk/orderbook/cancelOrdersOnChain", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookCancelOrdersOnChainPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCancelOrdersOnChainPost200Response</returns>
        public async Task<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>
            V1TsSdkOrderbookCancelOrdersOnChainPostAsync(
                V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest =
                    default,
                CancellationToken cancellationToken = default)
        {
            var task = V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfoAsync(
                v1TsSdkOrderbookCancelOrdersOnChainPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response> localVarResponse =
 await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersOnChainPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCancelOrdersOnChainPost200Response)</returns>
        public async Task<ApiResponse<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>>
            V1TsSdkOrderbookCancelOrdersOnChainPostWithHttpInfoAsync(
                V1TsSdkOrderbookCancelOrdersOnChainPostRequest? v1TsSdkOrderbookCancelOrdersOnChainPostRequest =
                    default,
                CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCancelOrdersOnChainPostRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<V1TsSdkOrderbookCancelOrdersOnChainPost200Response>(
                "/v1/ts-sdk/orderbook/cancelOrdersOnChain", localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookCancelOrdersOnChainPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        public V1TsSdkOrderbookCancelOrdersPost200Response V1TsSdkOrderbookCancelOrdersPost(
            V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default)
        {
            var localVarResponse =
                V1TsSdkOrderbookCancelOrdersPostWithHttpInfo(v1TsSdkOrderbookCancelOrdersPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        public ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response> V1TsSdkOrderbookCancelOrdersPostWithHttpInfo(
            V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCancelOrdersPostRequest;


            // make the HTTP request
            var localVarResponse =
                Client.Post<V1TsSdkOrderbookCancelOrdersPost200Response>("/v1/ts-sdk/orderbook/cancelOrders",
                    localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookCancelOrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCancelOrdersPost200Response</returns>
        public async Task<V1TsSdkOrderbookCancelOrdersPost200Response> V1TsSdkOrderbookCancelOrdersPostAsync(
            V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default,
            CancellationToken cancellationToken = default)
        {
            var task = V1TsSdkOrderbookCancelOrdersPostWithHttpInfoAsync(v1TsSdkOrderbookCancelOrdersPostRequest,
                cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCancelOrdersPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCancelOrdersPost200Response)</returns>
        public async Task<ApiResponse<V1TsSdkOrderbookCancelOrdersPost200Response>>
            V1TsSdkOrderbookCancelOrdersPostWithHttpInfoAsync(
                V1TsSdkOrderbookCancelOrdersPostRequest? v1TsSdkOrderbookCancelOrdersPostRequest = default,
                CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCancelOrdersPostRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<V1TsSdkOrderbookCancelOrdersPost200Response>(
                "/v1/ts-sdk/orderbook/cancelOrders", localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookCancelOrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookCreateListingPost200Response</returns>
        public V1TsSdkOrderbookCreateListingPost200Response V1TsSdkOrderbookCreateListingPost(
            V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default)
        {
            var localVarResponse =
                V1TsSdkOrderbookCreateListingPostWithHttpInfo(v1TsSdkOrderbookCreateListingPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookCreateListingPost200Response</returns>
        public ApiResponse<V1TsSdkOrderbookCreateListingPost200Response> V1TsSdkOrderbookCreateListingPostWithHttpInfo(
            V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCreateListingPostRequest;


            // make the HTTP request
            var localVarResponse =
                Client.Post<V1TsSdkOrderbookCreateListingPost200Response>("/v1/ts-sdk/orderbook/createListing",
                    localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookCreateListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookCreateListingPost200Response</returns>
        public async Task<V1TsSdkOrderbookCreateListingPost200Response> V1TsSdkOrderbookCreateListingPostAsync(
            V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default,
            CancellationToken cancellationToken = default)
        {
            var task = V1TsSdkOrderbookCreateListingPostWithHttpInfoAsync(v1TsSdkOrderbookCreateListingPostRequest,
                cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookCreateListingPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookCreateListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookCreateListingPost200Response)</returns>
        public async Task<ApiResponse<V1TsSdkOrderbookCreateListingPost200Response>>
            V1TsSdkOrderbookCreateListingPostWithHttpInfoAsync(
                V1TsSdkOrderbookCreateListingPostRequest? v1TsSdkOrderbookCreateListingPostRequest = default,
                CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookCreateListingPostRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<V1TsSdkOrderbookCreateListingPost200Response>(
                "/v1/ts-sdk/orderbook/createListing", localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookCreateListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        public V1TsSdkOrderbookFulfillOrderPost200Response V1TsSdkOrderbookFulfillOrderPost(
            V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default)
        {
            var localVarResponse =
                V1TsSdkOrderbookFulfillOrderPostWithHttpInfo(v1TsSdkOrderbookFulfillOrderPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        public ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response> V1TsSdkOrderbookFulfillOrderPostWithHttpInfo(
            V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookFulfillOrderPostRequest;


            // make the HTTP request
            var localVarResponse =
                Client.Post<V1TsSdkOrderbookFulfillOrderPost200Response>("/v1/ts-sdk/orderbook/fulfillOrder",
                    localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookFulfillOrderPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookFulfillOrderPost200Response</returns>
        public async Task<V1TsSdkOrderbookFulfillOrderPost200Response> V1TsSdkOrderbookFulfillOrderPostAsync(
            V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default,
            CancellationToken cancellationToken = default)
        {
            var task = V1TsSdkOrderbookFulfillOrderPostWithHttpInfoAsync(v1TsSdkOrderbookFulfillOrderPostRequest,
                cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookFulfillOrderPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookFulfillOrderPost200Response)</returns>
        public async Task<ApiResponse<V1TsSdkOrderbookFulfillOrderPost200Response>>
            V1TsSdkOrderbookFulfillOrderPostWithHttpInfoAsync(
                V1TsSdkOrderbookFulfillOrderPostRequest? v1TsSdkOrderbookFulfillOrderPostRequest = default,
                CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookFulfillOrderPostRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<V1TsSdkOrderbookFulfillOrderPost200Response>(
                "/v1/ts-sdk/orderbook/fulfillOrder", localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookFulfillOrderPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookPrepareListingPost200Response</returns>
        public V1TsSdkOrderbookPrepareListingPost200Response V1TsSdkOrderbookPrepareListingPost(
            V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default)
        {
            var localVarResponse =
                V1TsSdkOrderbookPrepareListingPostWithHttpInfo(v1TsSdkOrderbookPrepareListingPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookPrepareListingPost200Response</returns>
        public ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response>
            V1TsSdkOrderbookPrepareListingPostWithHttpInfo(
                V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookPrepareListingPostRequest;


            // make the HTTP request
            var localVarResponse =
                Client.Post<V1TsSdkOrderbookPrepareListingPost200Response>("/v1/ts-sdk/orderbook/prepareListing",
                    localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookPrepareListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookPrepareListingPost200Response</returns>
        public async Task<V1TsSdkOrderbookPrepareListingPost200Response> V1TsSdkOrderbookPrepareListingPostAsync(
            V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default,
            CancellationToken cancellationToken = default)
        {
            var task = V1TsSdkOrderbookPrepareListingPostWithHttpInfoAsync(v1TsSdkOrderbookPrepareListingPostRequest,
                cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response> localVarResponse =
 await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareListingPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookPrepareListingPost200Response)</returns>
        public async Task<ApiResponse<V1TsSdkOrderbookPrepareListingPost200Response>>
            V1TsSdkOrderbookPrepareListingPostWithHttpInfoAsync(
                V1TsSdkOrderbookPrepareListingPostRequest? v1TsSdkOrderbookPrepareListingPostRequest = default,
                CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookPrepareListingPostRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<V1TsSdkOrderbookPrepareListingPost200Response>(
                "/v1/ts-sdk/orderbook/prepareListing", localVarRequestOptions, Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookPrepareListingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        public V1TsSdkOrderbookPrepareOrderCancellationsPost200Response V1TsSdkOrderbookPrepareOrderCancellationsPost(
            V1TsSdkOrderbookPrepareOrderCancellationsPostRequest? v1TsSdkOrderbookPrepareOrderCancellationsPostRequest =
                default)
        {
            var localVarResponse =
                V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfo(
                    v1TsSdkOrderbookPrepareOrderCancellationsPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <returns>ApiResponse of V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        public ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>
            V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfo(
                V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?
                    v1TsSdkOrderbookPrepareOrderCancellationsPostRequest =
                    default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookPrepareOrderCancellationsPostRequest;


            // make the HTTP request
            var localVarResponse =
                Client.Post<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>(
                    "/v1/ts-sdk/orderbook/prepareOrderCancellations", localVarRequestOptions, Configuration);

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookPrepareOrderCancellationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of V1TsSdkOrderbookPrepareOrderCancellationsPost200Response</returns>
        public async Task<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>
            V1TsSdkOrderbookPrepareOrderCancellationsPostAsync(
                V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?
                    v1TsSdkOrderbookPrepareOrderCancellationsPostRequest =
                    default, CancellationToken cancellationToken = default)
        {
            var task = V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfoAsync(
                v1TsSdkOrderbookPrepareOrderCancellationsPostRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            Immutable.Ts.Client.ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response> localVarResponse =
 await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// </summary>
        /// <exception cref="Immutable.Ts.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v1TsSdkOrderbookPrepareOrderCancellationsPostRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (V1TsSdkOrderbookPrepareOrderCancellationsPost200Response)</returns>
        public async Task<ApiResponse<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>>
            V1TsSdkOrderbookPrepareOrderCancellationsPostWithHttpInfoAsync(
                V1TsSdkOrderbookPrepareOrderCancellationsPostRequest?
                    v1TsSdkOrderbookPrepareOrderCancellationsPostRequest =
                    default, CancellationToken cancellationToken = default)
        {
            var localVarRequestOptions = new RequestOptions();

            string[] _contentTypes =
            {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts =
            {
                "application/json"
            };


            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = v1TsSdkOrderbookPrepareOrderCancellationsPostRequest;


            // make the HTTP request

            var task = AsynchronousClient.PostAsync<V1TsSdkOrderbookPrepareOrderCancellationsPost200Response>(
                "/v1/ts-sdk/orderbook/prepareOrderCancellations", localVarRequestOptions, Configuration,
                cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (ExceptionFactory != null)
            {
                var _exception = ExceptionFactory("V1TsSdkOrderbookPrepareOrderCancellationsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///     Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            ApiClient?.Dispose();
        }
    }
}