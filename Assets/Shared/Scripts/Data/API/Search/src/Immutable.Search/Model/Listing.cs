/*
 * Indexer Search API
 *
 * This API implements endpoints to power data driven marketplace and game experiences
 *
 * The version of the OpenAPI document: 1.0
 * Contact: helpmebuild@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Immutable.Search.Model
{
    /// <summary>
    ///     Listing
    /// </summary>
    [DataContract(Name = "Listing")]
    public class Listing
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="Listing" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Listing()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Listing" /> class.
        /// </summary>
        /// <param name="listingId">Global Order identifier (required).</param>
        /// <param name="priceDetails">priceDetails (required).</param>
        /// <param name="tokenId">Token ID (required).</param>
        /// <param name="creator">ETH Address of listing creator (required).</param>
        /// <param name="amount">Amount of token included in the listing (required).</param>
        public Listing(string listingId = default, PriceDetails priceDetails = default, string tokenId = default,
            string creator = default, string amount = default)
        {
            // to ensure "listingId" is required (not null)
            if (listingId == null)
                throw new ArgumentNullException("listingId is a required property for Listing and cannot be null");
            ListingId = listingId;
            // to ensure "priceDetails" is required (not null)
            if (priceDetails == null)
                throw new ArgumentNullException("priceDetails is a required property for Listing and cannot be null");
            PriceDetails = priceDetails;
            // to ensure "tokenId" is required (not null)
            if (tokenId == null)
                throw new ArgumentNullException("tokenId is a required property for Listing and cannot be null");
            TokenId = tokenId;
            // to ensure "creator" is required (not null)
            if (creator == null)
                throw new ArgumentNullException("creator is a required property for Listing and cannot be null");
            Creator = creator;
            // to ensure "amount" is required (not null)
            if (amount == null)
                throw new ArgumentNullException("amount is a required property for Listing and cannot be null");
            Amount = amount;
        }

        /// <summary>
        ///     Global Order identifier
        /// </summary>
        /// <value>Global Order identifier</value>
        /// <example>018792C9-4AD7-8EC4-4038-9E05C598534A</example>
        [DataMember(Name = "listing_id", IsRequired = true, EmitDefaultValue = true)]
        public string ListingId { get; set; }

        /// <summary>
        ///     Gets or Sets PriceDetails
        /// </summary>
        [DataMember(Name = "price_details", IsRequired = true, EmitDefaultValue = true)]
        public PriceDetails PriceDetails { get; set; }

        /// <summary>
        ///     Token ID
        /// </summary>
        /// <value>Token ID</value>
        /// <example>1</example>
        [DataMember(Name = "token_id", IsRequired = true, EmitDefaultValue = true)]
        public string TokenId { get; set; }

        /// <summary>
        ///     ETH Address of listing creator
        /// </summary>
        /// <value>ETH Address of listing creator</value>
        /// <example>1334120697966828340666039427861105342297873844179</example>
        [DataMember(Name = "creator", IsRequired = true, EmitDefaultValue = true)]
        public string Creator { get; set; }

        /// <summary>
        ///     Amount of token included in the listing
        /// </summary>
        /// <value>Amount of token included in the listing</value>
        /// <example>1</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Listing {\n");
            sb.Append("  ListingId: ").Append(ListingId).Append("\n");
            sb.Append("  PriceDetails: ").Append(PriceDetails).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}