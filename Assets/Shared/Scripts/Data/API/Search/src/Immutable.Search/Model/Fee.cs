/*
 * Indexer Search API
 *
 * This API implements endpoints to power data driven marketplace and game experiences
 *
 * The version of the OpenAPI document: 1.0
 * Contact: helpmebuild@immutable.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Immutable.Search.Model
{
    /// <summary>
    ///     Fee
    /// </summary>
    [DataContract(Name = "Fee")]
    public class Fee
    {
        /// <summary>
        ///     Fee type
        /// </summary>
        /// <value>Fee type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            ///     Enum ROYALTY for value: ROYALTY
            /// </summary>
            [EnumMember(Value = "ROYALTY")] ROYALTY = 1,

            /// <summary>
            ///     Enum MAKERECOSYSTEM for value: MAKER_ECOSYSTEM
            /// </summary>
            [EnumMember(Value = "MAKER_ECOSYSTEM")]
            MAKERECOSYSTEM = 2,

            /// <summary>
            ///     Enum TAKERECOSYSTEM for value: TAKER_ECOSYSTEM
            /// </summary>
            [EnumMember(Value = "TAKER_ECOSYSTEM")]
            TAKERECOSYSTEM = 3,

            /// <summary>
            ///     Enum PROTOCOL for value: PROTOCOL
            /// </summary>
            [EnumMember(Value = "PROTOCOL")] PROTOCOL = 4
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Fee()
        {
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="Fee" /> class.
        /// </summary>
        /// <param name="amount">Fee in the payment currency (required).</param>
        /// <param name="type">Fee type (required).</param>
        /// <param name="recipientAddress">Wallet address of fee recipient (required).</param>
        public Fee(string amount = default, TypeEnum type = default, string recipientAddress = default)
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
                throw new ArgumentNullException("amount is a required property for Fee and cannot be null");
            Amount = amount;
            Type = type;
            // to ensure "recipientAddress" is required (not null)
            if (recipientAddress == null)
                throw new ArgumentNullException("recipientAddress is a required property for Fee and cannot be null");
            RecipientAddress = recipientAddress;
        }


        /// <summary>
        ///     Fee type
        /// </summary>
        /// <value>Fee type</value>
        /// <example>ROYALTY</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        ///     Fee in the payment currency
        /// </summary>
        /// <value>Fee in the payment currency</value>
        /// <example>1000000000000000000</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        ///     Wallet address of fee recipient
        /// </summary>
        /// <value>Wallet address of fee recipient</value>
        /// <example>1390849295786071768276380950238675083608645509683</example>
        [DataMember(Name = "recipient_address", IsRequired = true, EmitDefaultValue = true)]
        public string RecipientAddress { get; set; }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fee {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RecipientAddress: ").Append(RecipientAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}